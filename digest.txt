Directory structure:
└── dotfiles/
    ├── readme.md
    ├── .tmux.conf
    ├── .zshrc
    ├── oh-my-posh/
    │   └── mudkip-theme.omp.json
    └── .config/
        ├── alacritty.toml
        ├── hypr/
        │   ├── hyprbinds.conf
        │   ├── hypridle.conf
        │   ├── hyprland.conf
        │   ├── hyprpaper.conf
        │   ├── monitors.conf
        │   ├── workspaces.conf
        │   ├── scripts/
        │   │   ├── cliphist.sh
        │   │   ├── hyprshot-region.sh
        │   │   ├── hyprshot-window.sh
        │   │   ├── toggle-monitors.sh
        │   │   └── wl-paste.sh
        │   └── wallpapers/
        ├── lazygit/
        │   └── config.yml
        ├── nvim/
        │   ├── init.lua
        │   ├── lazy-lock.json
        │   ├── .stylua.toml
        │   ├── doc/
        │   │   ├── kickstart.txt
        │   │   └── tags
        │   └── lua/
        │       ├── keymaps.lua
        │       ├── lazy-bootstrap.lua
        │       ├── lazy-plugins.lua
        │       ├── options.lua
        │       └── kickstart/
        │           ├── health.lua
        │           └── plugins/
        │               ├── barbar.lua
        │               ├── cmp.lua
        │               ├── colorful-menu.lua
        │               ├── conform.lua
        │               ├── debug.lua
        │               ├── gitsigns.lua
        │               ├── go-plugin.lua
        │               ├── gonvim.lua
        │               ├── harpoon.lua
        │               ├── indent_line.lua
        │               ├── lint.lua
        │               ├── lspconfig.lua
        │               ├── markview.lua
        │               ├── mini.lua
        │               ├── moveline.lua
        │               ├── neotree.lua
        │               ├── snacks.lua
        │               ├── tailwind-tools.lua
        │               ├── telescope.lua
        │               ├── themes.lua
        │               ├── todo-comments.lua
        │               ├── tokyonight.lua
        │               ├── treesitter.lua
        │               ├── trouble.lua
        │               ├── undotree.lua
        │               ├── which-key.lua
        │               └── windsurf.lua
        ├── waybar/
        │   ├── config.jsonc
        │   └── style.css
        └── wofi/
            ├── style.css
            └── style.scss

================================================
File: readme.md
================================================
# Import Notes

While most of the files included here will work as-is, there's a few things you need to install beforehand.

+ Zsh
+ [HomeBrew](https://brew.sh/), alongside the ["next steps" section](https://docs.brew.sh/Installation).
+ Node (Via nvm. apt is horrifically out of date for whatever reason.)
+ tmux
+ NeoVim
+ GNU Stow. Run `stow .` in /dotfiles/ in order to set up everything. `stow --adopt .` if there are duplicate files.

Also, navigate to the /etc/ directory, create a wsl.conf file, and add the following:

```conf
[terminal]
TERM=xterm-256color
```

This allows tmux to show true colour (a.k.a pretty nvim color schemes)



================================================
File: .tmux.conf
================================================
set -g mouse on

# Start number at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# Keymaps
unbind C-b
set -g prefix C-space
bind C-space send-prefix

bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

bind "-" split-window -v -c "#{pane_current_path}"
bind "[" split-window -h -c "#{pane_current_path}"

set-option -sa terminal-features ',alacritty:RGB'
set-option -ga terminal-features ",alacritty:usstyle"
set-option -ga terminal-overrides ',alacritty:Tc'
set -g default-terminal "screen-256color"

# Theme
set -g @catppuccin_flavour 'mocha'

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'dreamsofcode-io/catppuccin-tmux'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'



================================================
File: .zshrc
================================================
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
eval "$(oh-my-posh init zsh --config '~/oh-my-posh/mudkip-theme.omp.json')"
export PATH="$PATH:/usr/local/nvim-linux64/bin"

eval "$(zoxide init --cmd cd zsh)"
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh

export GOPATH=/home/bence/go
export GOROOT=/usr/lib/golang
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$HOME/go/bin
export PATH=$PATH:/home/bence/Downloads/idea-IU-243.23654.189/bin

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
export PATH="/home/linuxbrew/.linuxbrew/opt/openjdk@21/bin:$PATH"
export PATH="$HOME/scripts:$PATH"
export PATH="/home/bence/zig-installs/zig-linux-x86_64-0.14.0-dev.2628+5b5c60f43:$PATH"

# if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
#   tmux attach-session -t default || tmux new-session -s default
# fi

# pnpm
export PNPM_HOME="/home/bence/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
export PATH="$PATH:/home/bence/.modular/bin"
export PATH=$HOME/.local/bin:$PATH

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

# Turso
export PATH="$PATH:/home/bence/.turso"



================================================
File: oh-my-posh/mudkip-theme.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "transient_prompt": {
    "template": "{{now | date \"15:04:05\"}} \u2192 ",
    "newline": true
  },
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "segments": [
        {
          "properties": {
            "cache_duration": "none"
          },
          "leading_diamond": "\u256d\u2500\ue0b2",
          "template": " {{ .Path }} ",
          "foreground": "#ffffff",
          "background": "#0077c2",
          "type": "path",
          "style": "diamond"
        },
        {
          "properties": {
            "branch_icon": "\ue725 ",
            "cache_duration": "none",
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "template": " {{ .HEAD }} {{ if .Working.Changed }}{{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#ef5350> \uf046 {{ .Staging.String }}</>{{ end }} ",
          "foreground": "#011627",
          "powerline_symbol": "\ue0b0",
          "background": "#FFFB38",
          "type": "git",
          "style": "powerline",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffeb95{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#c5e478{{ end }}",
            "{{ if gt .Ahead 0 }}#C792EA{{ end }}",
            "{{ if gt .Behind 0 }}#C792EA{{ end }}"
          ]
        }
      ],
      "newline": true
    },
    {
      "type": "python",
      "style": "powerline",
      "powerline_symbol": "",
      "foreground": "#100e23",
      "background": "#906cff",
      "template": "  {{ .Full }} "
    },
    {
      "type": "prompt",
      "alignment": "right",
      "segments": [
        {
          "properties": {
            "cache_duration": "none",
            "fetch_package_manager": true,
            "npm_icon": " <#cc3a3a>\ue5fa</> ",
            "yarn_icon": " <#348cba>\ue6a7</>"
          },
          "leading_diamond": " \ue0b6",
          "trailing_diamond": "\ue0b4",
          "template": "\ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "foreground": "#3C873A",
          "background": "#303030",
          "type": "node",
          "style": "diamond"
        },
        {
          "properties": {
            "cache_duration": "none",
            "charged_icon": "\ue22f ",
            "charging_icon": "\ue234 ",
            "discharging_icon": "\ue231 "
          },
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}\uf295 ",
          "foreground": "#193549",
          "background": "#ffeb3b",
          "type": "battery",
          "style": "diamond",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ]
        },
        {
          "properties": {
            "cache_duration": "none"
          },
          "leading_diamond": " \ue0b6",
          "trailing_diamond": "\ue0b4",
          "template": " \ue641 {{ .CurrentDate | date .Format }} ",
          "foreground": "#ffffff",
          "background": "#40c4ff",
          "type": "time",
          "style": "diamond",
          "invert_powerline": true
        }
      ]
    },
    {
      "type": "prompt",
      "alignment": "left",
      "segments": [
        {
          "properties": {
            "cache_duration": "none"
          },
          "template": "\u2570\u2500",
          "foreground": "#0077c2",
          "type": "text",
          "style": "plain"
        },
        {
          "properties": {
            "always_enabled": true,
            "cache_duration": "none"
          },
          "template": "❯ ",
          "foreground": "#e0f8ff",
          "type": "status",
          "style": "plain",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#ef5350{{ end }}"
          ]
        }
      ],
      "newline": true
    }
  ],
  "version": 3
}



================================================
File: .config/alacritty.toml
================================================
[terminal.shell]
program="/bin/zsh"

[font]
#normal={family = "Monocraft", style = "Regular"}
normal={family = "FiraCode Nerd Font Propo", style = "Light"}
bold={family = "FiraCode Nerd Font Propo", style = "Bold"}

size = 10.0

[window]
dimensions = {columns = 120, lines = 35}
padding={x=4,y=0}

[mouse]
hide_when_typing=true

[terminal]



================================================
File: .config/hypr/hyprbinds.conf
================================================
# See https://wiki.hyprland.org/Configuring/Keywords/
$mainMod = SUPER # Sets "Windows" key as main modifier

# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
bind = $mainMod, Q, exec, $terminal
bind = $mainMod, X, killactive,
bind = $mainMod, M, exit,
bind = $mainMod, E, exec, $fileManager
bind = $mainMod, V, togglefloating,

bind = $mainMod, R, exec, $menu

bind = $mainMod, H, movefocus, l
bind = $mainMod, L, movefocus, r
bind = $mainMod, K, movefocus, u
bind = $mainMod, J, movefocus, d

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# woke-fi binds
bind = $mainMod, C, exec, sh -c '~/go/bin/cliphist list | wofi -i -S dmenu | ~/go/bin/cliphist decode | wl-copy'

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = ALT, TAB, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# Screenshot
bind = $mainMod SHIFT, P, exec,~/.config/hypr/scripts/hyprshot-window.sh
bind = $mainMod, P, exec, ~/.config/hypr/scripts/hyprshot-region.sh

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod SHIFT, L, workspace, e+1
bind = $mainMod SHIFT, H, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous



================================================
File: .config/hypr/hypridle.conf
================================================
general {
    lock_cmd = pidof hyprlock || hyprlock       # avoid starting multiple hyprlock instances.
    before_sleep_cmd = loginctl lock-session    # lock before suspend.
    after_sleep_cmd = hyprctl dispatch dpms on  # to avoid having to press a key twice to turn on the display.
}

listener {
    timeout = 150                                # 2.5min.
    on-timeout = brightnessctl -s set 10         # set monitor backlight to minimum, avoid 0 on OLED monitor.
    on-resume = brightnessctl -r                 # monitor backlight restore.
}

# turn off keyboard backlight, comment out this section if you dont have a keyboard backlight.
listener { 
    timeout = 150                                          # 2.5min.
    on-timeout = brightnessctl -sd rgb:kbd_backlight set 0 # turn off keyboard backlight.
    on-resume = brightnessctl -rd rgb:kbd_backlight        # turn on keyboard backlight.
}

listener {
    timeout = 300                                 # 5min
    on-timeout = loginctl lock-session            # lock screen when timeout has passed
}

listener {
    timeout = 330                                                     # 5.5min
    on-timeout = hyprctl dispatch dpms off                            # screen off when timeout has passed
    on-resume = hyprctl dispatch dpms on && brightnessctl -r          # screen on when activity is detected after timeout has fired.
}

listener {
    timeout = 1800                                # 30min
    on-timeout = systemctl suspend                # suspend pc
}



================================================
File: .config/hypr/hyprland.conf
================================================
################
### MONITORS ###
################

source = ~/.config/hypr/monitors.conf


###################
### MY PROGRAMS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/

$terminal = alacritty
$fileManager = nautilus
$menu = wofi --show drun -n -I -i


#################
### AUTOSTART ###
#################

exec-once = sleep 1 && waybar
exec-once = hyprpaper
exec-once = $terminal
exec-once = nm-applet
exec-once = dunst
# exec-once = ~/.config/hypr/scripts/toggle-monitors.sh
exec-once = hypridle
exec-once = blueman-applet
exec-once = ~/.config/hypr/scripts/wl-paste.sh

#############################
### ENVIRONMENT VARIABLES ###
#############################

# See https://wiki.hyprland.org/Configuring/Environment-variables/

env = XCURSOR_SIZE,24
env = HYPRCURSOR_SIZE,24


#####################
### LOOK AND FEEL ###
#####################

# Refer to https://wiki.hyprland.org/Configuring/Variables/

# https://wiki.hyprland.org/Configuring/Variables/#general
general {
    gaps_in = 5
    gaps_out = 25

    gaps_workspaces = 15

    border_size = 3

    # https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors

    col.active_border   = rgba(3d495bff)
    col.inactive_border = rgba(21222Caa)

    # Set to true enable resizing windows by clicking and dragging on borders and gaps
    resize_on_border = true

    # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
    allow_tearing = false

    layout = dwindle
}

# https://wiki.hyprland.org/Configuring/Variables/#decoration
decoration {
    rounding = 10

    # Change transparency of focused and unfocused windows
    active_opacity = 1.0
    inactive_opacity = 0.92

    dim_inactive = true
    dim_strength = 0.1


    # https://wiki.hyprland.org/Configuring/Variables/#blur
    blur {
        enabled = true
        size = 8
        passes = 1
        new_optimizations = true

        vibrancy = 0.1696
    }
}


# https://wiki.hyprland.org/Configuring/Variables/#animations
animations {
    enabled = true

    # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

    bezier = myBezier, 0.05, 0.9, 0.1, 1.05

    animation = windows, 1, 7, myBezier
    animation = windowsOut, 1, 7, default, popin 80%
    animation = border, 1, 10, default
    animation = borderangle, 1, 8, default
    animation = fade, 1, 7, default
    animation = workspaces, 0, 6, default
}

# See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
dwindle {
    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = true # You probably want this
}

# See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
master {
    new_status = master
}

# https://wiki.hyprland.org/Configuring/Variables/#misc
misc {
    force_default_wallpaper = -1 # Set to 0 or 1 to disable the anime mascot wallpapers
    disable_hyprland_logo = true
    middle_click_paste = false
}


#############
### INPUT ###
#############

# https://wiki.hyprland.org/Configuring/Variables/#input
input {
    kb_layout = ie
    kb_variant =
    kb_model =
    kb_options = caps:swapescape
    kb_rules =

    follow_mouse = 1

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.

    touchpad {
        natural_scroll = true
    }
}

# https://wiki.hyprland.org/Configuring/Variables/#gestures
gestures {
    workspace_swipe = true
}

# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more
device {
    name = epic-mouse-v1
    sensitivity = -0.5
}

###################
### KEYBINDINGS ###
###################

source = ~/.config/hypr/hyprbinds.conf

##############################
### WINDOWS AND WORKSPACES ###
##############################

# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
# See https://wiki.hyprland.org/Configuring/Workspace-Rules/ for workspace rules

source = ~/.config/hypr/workspaces.conf
# Example windowrule v2
# windowrulev2 = float,class:^(kitty)$,title:^(kitty)$

# Ignore maximize requests from apps. You'll probably like this.
windowrulev2 = suppressevent maximize, class:.*

# Disable hyprland border around wofi
windowrulev2 = noborder, class:^(wofi)$

windowrulev2 = bordercolor rgb(FFFF00) rgb(FFAA00), workspace:-98

# Fix some dragging issues with XWayland
windowrulev2 = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0



================================================
File: .config/hypr/hyprpaper.conf
================================================
preload = ~/.config/hypr/wallpapers/pixel_sakura.png
wallpaper = , ~/.config/hypr/wallpapers/pixel_sakura.png
splash = false



================================================
File: .config/hypr/monitors.conf
================================================
# Generated by nwg-displays on 2025-06-11 at 16:42:46. Do not edit manually.

monitor=eDP-1,1920x1200@60.01,1920x0,1.0,mirror,eDP-1
monitor=HDMI-A-1,1920x1080@60.0,0x0,1.0



================================================
File: .config/hypr/workspaces.conf
================================================



================================================
File: .config/hypr/scripts/cliphist.sh
================================================
#!/bin/bash
cliphist list | wofi -S dmenu -n | cliphist decode | wl-copy



================================================
File: .config/hypr/scripts/hyprshot-region.sh
================================================
#!/bin/bash
# Save as ~/.config/hypr/scripts/hyprshot-fixed.sh

# 1. Set PATH to include your user's bin directory
export PATH="$HOME/.local/bin:$PATH"

# 2. Get the Hyprland instance signature from the running process
export $(grep -z HYPRLAND_INSTANCE_SIGNATURE /proc/$(pgrep -x Hyprland)/environ | tr '\0' ' ')

# 3. Use the full path to hyprshot to be 100% sure
/home/bence/.local/bin/hyprshot "$@" -m region -o "/home/bence/Pictures/Screenshots" -z



================================================
File: .config/hypr/scripts/hyprshot-window.sh
================================================
#!/bin/bash
# Save as ~/.config/hypr/scripts/hyprshot-fixed.sh

# 1. Set PATH to include your user's bin directory
export PATH="$HOME/.local/bin:$PATH"

# 2. Get the Hyprland instance signature from the running process
export $(grep -z HYPRLAND_INSTANCE_SIGNATURE /proc/$(pgrep -x Hyprland)/environ | tr '\0' ' ')

# 3. Use the full path to hyprshot to be 100% sure
/home/bence/.local/bin/hyprshot "$@" -m output



================================================
File: .config/hypr/scripts/toggle-monitors.sh
================================================
#!/bin/bash

while true; do
    # Check if HDMI is present
    HAS_HDMI=$(hyprctl monitors | grep -q "HDMI-A-1" && echo 1 || echo 0)
    # Check if eDP is present
    HAS_EDP=$(hyprctl monitors | grep -q "eDP-1" && echo 1 || echo 0)

    # If HDMI is not present, try to enable it (in case it was just plugged in)
    if [ "$HAS_HDMI" -eq 0 ]; then
        hyprctl keyword monitor "HDMI-A-1,preferred,auto,1"
        sleep 1  # Give Hyprland a moment to process
        HAS_HDMI=$(hyprctl monitors | grep -q "HDMI-A-1" && echo 1 || echo 0)
    fi

    # If HDMI is present, disable eDP
    if [ "$HAS_HDMI" -eq 1 ]; then
        hyprctl keyword monitor "eDP-1,disable"
    fi

    # If HDMI is not present, enable eDP and disable HDMI
    if [ "$HAS_HDMI" -eq 0 ]; then
        hyprctl keyword monitor "eDP-1,preferred,auto,1"
        hyprctl keyword monitor "HDMI-A-1,disable"
    fi

    sleep 2
done



================================================
File: .config/hypr/scripts/wl-paste.sh
================================================
#!/bin/bash
wl-paste --watch cliphist store




================================================
File: .config/lazygit/config.yml
================================================
gui:
  nerdFontsVersion: "3"

git:
  paging:
    pager: delta --paging=never
    useConfig: true



================================================
File: .config/nvim/init.lua
================================================
-- Set <space> as the leader key
-- See `:help mapleader`
--  NOTE: Must happen before plugins are loaded (otherwise wrong leader will be used)
vim.g.mapleader = " "
vim.g.maplocalleader = " "

-- Set to true if you have a Nerd Font installed and selected in the terminal
vim.g.have_nerd_font = true

-- Set max character line to 80 characters
vim.opt.colorcolumn = "80"

-- [[ Setting options ]]
require "options"

-- [[ Basic Keymaps ]]
require "keymaps"

-- [[ Install `lazy.nvim` plugin manager ]]
require "lazy-bootstrap"

-- [[ Configure and install plugins ]]
require "lazy-plugins"

-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lazy-lock.json
================================================
{
  "LuaSnip": { "branch": "master", "commit": "c1851d5c519611dfc451b6582961b2602e0af89b" },
  "barbar.nvim": { "branch": "master", "commit": "53b5a2f34b68875898f0531032fbf090e3952ad7" },
  "binary.nvim": { "branch": "main", "commit": "0a0422551dfc9e8b02c00b133f63d72a75938d81" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "a8912b88ce488f411177fc8aed358b04dc246d7b" },
  "cmp-path": { "branch": "main", "commit": "c6635aae33a50d6010bf1aa756ac2398a2d54c32" },
  "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
  "colorful-menu.nvim": { "branch": "master", "commit": "bc3e82609f2fcf7dad7ca87c20e65e51d5d9d87c" },
  "conform.nvim": { "branch": "master", "commit": "a4bb5d6c4ae6f32ab13114e62e70669fa67745b9" },
  "fidget.nvim": { "branch": "main", "commit": "d9ba6b7bfe29b3119a610892af67602641da778e" },
  "gitsigns.nvim": { "branch": "main", "commit": "39e0d1cd44eafed5f30c372e377ab1cb1781ec9f" },
  "go.nvim": { "branch": "master", "commit": "844b66b397edcbac8f941129eb4a57472a582a52" },
  "guihua.lua": { "branch": "master", "commit": "0cc9631914ffcbe3e474e809c610d12a75b660cf" },
  "harpoon": { "branch": "master", "commit": "1bc17e3e42ea3c46b33c0bbad6a880792692a1b3" },
  "indent-blankline.nvim": { "branch": "master", "commit": "005b56001b2cb30bfa61b7986bc50657816ba4ba" },
  "kanagawa.nvim": { "branch": "master", "commit": "4de88d695634a8776c687af8e7436cfa074aa0c0" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "lazydev.nvim": { "branch": "main", "commit": "2367a6c0a01eb9edb0464731cc0fb61ed9ab9d2c" },
  "luvit-meta": { "branch": "main", "commit": "1df30b60b1b4aecfebc785aa98943db6c6989716" },
  "markview.nvim": { "branch": "main", "commit": "23f8bda5a172287c3423a3ffe7640efefa52a48b" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "d39a75bbce4b8aad5d627191ea915179c77c100f" },
  "mason-nvim-dap.nvim": { "branch": "main", "commit": "4c2cdc69d69fe00c15ae8648f7e954d99e5de3ea" },
  "mason-tool-installer.nvim": { "branch": "main", "commit": "75d60a8f928decd8b38897f80849768b7c540a5b" },
  "mason.nvim": { "branch": "main", "commit": "888d6ee499d8089a3a4be4309d239d6be1c1e6c0" },
  "mini.nvim": { "branch": "main", "commit": "18889a4993a2c6de64eb07f91e7ad8666793441a" },
  "move.nvim": { "branch": "main", "commit": "599b14047b82e92874b9a408e4df228b965c3a1d" },
  "neo-tree.nvim": { "branch": "main", "commit": "f481de16a0eb59c985abac8985e3f2e2f75b4875" },
  "nui.nvim": { "branch": "main", "commit": "f535005e6ad1016383f24e39559833759453564e" },
  "nvim-cmp": { "branch": "main", "commit": "b5311ab3ed9c846b585c0c15b7559be131ec4be9" },
  "nvim-dap": { "branch": "master", "commit": "8df427aeba0a06c6577dc3ab82de3076964e3b8d" },
  "nvim-dap-go": { "branch": "main", "commit": "8763ced35b19c8dc526e04a70ab07c34e11ad064" },
  "nvim-dap-ui": { "branch": "master", "commit": "73a26abf4941aa27da59820fd6b028ebcdbcf932" },
  "nvim-lint": { "branch": "master", "commit": "fdb04e9285edefbe25a02a31a35e8fbb10fe054d" },
  "nvim-lspconfig": { "branch": "master", "commit": "ac1dfbe3b60e5e23a2cff90e3bd6a3bc88031a57" },
  "nvim-nio": { "branch": "master", "commit": "21f5324bfac14e22ba26553caf69ec76ae8a7662" },
  "nvim-treesitter": { "branch": "master", "commit": "066fd6505377e3fd4aa219e61ce94c2b8bdb0b79" },
  "nvim-web-devicons": { "branch": "master", "commit": "1fb58cca9aebbc4fd32b086cb413548ce132c127" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "snacks.nvim": { "branch": "main", "commit": "bc0630e43be5699bb94dadc302c0d21615421d93" },
  "tailwind-tools.nvim": { "branch": "master", "commit": "999d314444073095494f5a36b90fdba3c432a457" },
  "telescope-fzf-native.nvim": { "branch": "main", "commit": "1f08ed60cafc8f6168b72b80be2b2ea149813e55" },
  "telescope-ui-select.nvim": { "branch": "master", "commit": "6e51d7da30bd139a6950adf2a47fda6df9fa06d2" },
  "telescope.nvim": { "branch": "0.1.x", "commit": "a0bbec21143c7bc5f8bb02e0005fa0b982edc026" },
  "todo-comments.nvim": { "branch": "main", "commit": "304a8d204ee787d2544d8bc23cd38d2f929e7cc5" },
  "trouble.nvim": { "branch": "main", "commit": "85bedb7eb7fa331a2ccbecb9202d8abba64d37b3" },
  "undotree": { "branch": "master", "commit": "b951b87b46c34356d44aa71886aecf9dd7f5788a" },
  "vim-sleuth": { "branch": "master", "commit": "be69bff86754b1aa5adcbb527d7fcd1635a84080" },
  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" }
}



================================================
File: .config/nvim/.stylua.toml
================================================
column_width = 160
line_endings = "Unix"
indent_type = "Spaces"
indent_width = 4
quote_style = "AutoPreferDouble"
call_parentheses = "None"



================================================
File: .config/nvim/doc/kickstart.txt
================================================
================================================================================
INTRODUCTION                                                  *kickstart.nvim*

Kickstart.nvim is a project to help you get started on your neovim journey.

                                                            *kickstart-is-not*
It is not:
- Complete framework for every plugin under the sun
- Place to add every plugin that could ever be useful

                                                                *kickstart-is*
It is:
- Somewhere that has a good start for the most common "IDE" type features:
    - autocompletion
    - goto-definition
    - find references
    - fuzzy finding
    - and hinting at what more can be done :)
- A place to _kickstart_ your journey.
    - You should fork this project and use/modify it so that it matches your
      style and preferences. If you don't want to do that, there are probably
      other projects that would fit much better for you (and that's great!)!

 vim:tw=78:ts=8:ft=help:norl:



================================================
File: .config/nvim/doc/tags
================================================
kickstart-is	kickstart.txt	/*kickstart-is*
kickstart-is-not	kickstart.txt	/*kickstart-is-not*
kickstart.nvim	kickstart.txt	/*kickstart.nvim*



================================================
File: .config/nvim/lua/keymaps.lua
================================================
-- Shorthand for mapping keys
local map = vim.keymap.set

-- Normal mode mappings
map("n", "<C-s>", "<cmd>w<CR>", { desc = "Save" })

map("n", "<leader>ra", vim.lsp.buf.rename, { desc = "LSP [r]en[a]me" })

-- Up/Down centralisation
map("n", "<C-u>", "<C-u>zz", { desc = "Go up and center" })
map("n", "<C-d>", "<C-d>zz", { desc = "Go up and center" })

-- Clear highlights on search when pressing <Esc> in normal mode
--  See `:help hlsearch`
map("n", "<Esc>", "<cmd>nohlsearch<CR>")

-- Tailwind Tools
map("n", "<leader>tas", ":TailwindSort<CR>", { desc = "Sorts Tailwind Classes" })
map("n", "<leader>tah", ":TailwindConcealToggle<CR>", { desc = "Toggles Tailwind class conceal" })
map("n", "<leader>tac", ":TailwindColorToggle<CR>", { desc = "Toggles Tailwind colours" })

-- Undo Tree
map("n", "<leader>ut", "<cmd>UndotreeToggle<CR><cmd>UndotreeFocus<CR>", { desc = "Toggles UndoTree" })

-- Harpoon
map("n", "<leader>ha", "<CMD>lua require('harpoon.mark').add_file()<CR>", { desc = "Adds the current file to Harpoon" })
map("n", "<leader>hg", "<CMD>lua require('harpoon.ui').toggle_quick_menu()<CR>", { desc = "View all project marks" })
map("n", "<CM-l>", "<CMD>lua require('harpoon.ui').nav_next()<CR>", { desc = "Navigate to the next mark" })
map("n", "<CM-h>", "<CMD>lua require('harpoon.ui').nav_prev()<CR>", { desc = "Navigate to the previous mark" })

-- Themes
map("n", "<leader>ttw", "<CMD>colorscheme kanagawa-wave<CR>", { desc = "Switch to Kanagawa Wave" })
map("n", "<leader>ttd", "<CMD>colorscheme kanagawa-dragon<CR>", { desc = "Switch to Kanagawa Dragon" })
map("n", "<leader>ttl", "<CMD>colorscheme kanagawa-lotus<CR>", { desc = "Switch to Kanagawa Lotus" })
map("n", "<leader>ttb", "<CMD>colorscheme binary<CR>", { desc = "Switch to Binary" })

-- Lazygit
map("n", "<leader>gg", function()
    Snacks.lazygit.open()
end, { desc = "Open Lazygit" })

-- MoveLine
map("n", "<M-J>", ":MoveLine(1)<CR>", { desc = "Moves line up" })
map("n", "<M-K>", ":MoveLine(-1)<CR>", { desc = "Moves line down" })

map("v", "<M-J>", ":MoveBlock(1)<CR>", { desc = "Moves line up" })
map("v", "<M-K>", ":MoveBlock(-1)<CR>", { desc = "Moves line down" })

-- -- BARBAR
-- Move to previous/next
map("n", "<Tab>", "<Cmd>BufferNext<CR>")
map("n", "<S-Tab>", "<Cmd>BufferPrevious<CR>")

-- Re-order to previous/next
map("n", "<M-H>", "<Cmd>BufferMovePrevious<CR>")
map("n", "<M-L>", "<Cmd>BufferMoveNext<CR>")

-- Goto buffer in position...
map("n", "<leader>1", "<Cmd>BufferGoto 1<CR>")
map("n", "<leader>2", "<Cmd>BufferGoto 2<CR>")
map("n", "<leader>3", "<Cmd>BufferGoto 3<CR>")
map("n", "<leader>4", "<Cmd>BufferGoto 4<CR>")
map("n", "<leader>5", "<Cmd>BufferGoto 5<CR>")
map("n", "<leader>6", "<Cmd>BufferGoto 6<CR>")
map("n", "<leader>7", "<Cmd>BufferGoto 7<CR>")
map("n", "<leader>8", "<Cmd>BufferGoto 8<CR>")
map("n", "<leader>9", "<Cmd>BufferGoto 9<CR>")

-- Close buffer
map("n", "<leader>x", "<Cmd>BufferClose<CR>")

-- Diagnostic keymaps
map("n", "<leader>q", vim.diagnostic.setloclist, { desc = "Open diagnostic [Q]uickfix list" })

-- Exit terminal mode in the builtin terminal with a shortcut that is a bit easier
-- for people to discover. Otherwise, you normally need to press <C-\><C-n>, which
-- is not what someone will guess without a bit more experience.
--
-- NOTE: This won't work in all terminal emulators/tmux/etc. Try your own mapping
-- or just use <C-\><C-n> to exit terminal mode
map("t", "<Esc><Esc>", "<C-\\><C-n>", { desc = "Exit terminal mode" })
map("t", "kj", "<C-\\><C-n>", { desc = "Exits terminal mode" })
map("t", "jk", "<C-\\><C-n>", { desc = "Exits terminal mode" })

-- Keybinds to make split navigation easier.
--  Use CTRL+<hjkl> to switch between windows
--
--  See `:help wincmd` for a list of all window commands
map("n", "<C-h>", "<C-w><C-h>", { desc = "Move focus to the left window" })
map("n", "<C-l>", "<C-w><C-l>", { desc = "Move focus to the right window" })
map("n", "<C-j>", "<C-w><C-j>", { desc = "Move focus to the lower window" })
map("n", "<C-k>", "<C-w><C-k>", { desc = "Move focus to the upper window" })

-- [[ Basic Autocommands ]]
--  See `:help lua-guide-autocommands`

-- Highlight when yanking (copying) text
--  Try it with `yap` in normal mode
--  See `:help vim.highlight.on_yank()`
vim.api.nvim_create_autocmd("TextYankPost", {
    desc = "Highlight when yanking (copying) text",
    group = vim.api.nvim_create_augroup("kickstart-highlight-yank", { clear = true }),
    callback = function()
        vim.highlight.on_yank()
    end,
})

-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/lazy-bootstrap.lua
================================================
-- [[ Install `lazy.nvim` plugin manager ]]
--    See `:help lazy.nvim.txt` or https://github.com/folke/lazy.nvim for more info
local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
    local lazyrepo = "https://github.com/folke/lazy.nvim.git"
    local out = vim.fn.system { "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath }
    if vim.v.shell_error ~= 0 then
        error("Error cloning lazy.nvim:\n" .. out)
    end
end ---@diagnostic disable-next-line: undefined-field
vim.opt.rtp:prepend(lazypath)

-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/lazy-plugins.lua
================================================
-- [[ Configure and install plugins ]]
--
--  To check the current status of your plugins, run
--    :Lazy
--
--  You can press `?` in this menu for help. Use `:q` to close the window
--
--  To update plugins you can run
--    :Lazy update
--
require("lazy").setup({
    "tpope/vim-sleuth", -- Detect tabstop and shiftwidth automatically

    require "kickstart.plugins.neotree",

    require "kickstart.plugins.gonvim",

    require "kickstart.plugins.snacks",

    require "kickstart.plugins.themes",

    require "kickstart.plugins.tailwind-tools",

    require "kickstart.plugins.undotree",

    require "kickstart.plugins.moveline",

    require "kickstart.plugins.go-plugin",

    require "kickstart.plugins.colorful-menu",

    require "kickstart/plugins/gitsigns",

    require "kickstart/plugins/which-key",

    require "kickstart/plugins/telescope",

    require "kickstart/plugins/lspconfig",

    require "kickstart/plugins/conform",

    require "kickstart/plugins/cmp",

    require "kickstart/plugins/todo-comments",

    require "kickstart/plugins/mini",

    require "kickstart/plugins/treesitter",

    require "kickstart.plugins.trouble",

    require "kickstart.plugins.barbar",

    require "kickstart.plugins.debug",

    require "kickstart.plugins.indent_line",

    require "kickstart.plugins.lint",

    require "kickstart.plugins.markview",

    require "kickstart.plugins.harpoon",
}, {
    ui = {
        -- If you are using a Nerd Font: set icons to an empty table which will use the
        -- default lazy.nvim defined Nerd Font icons, otherwise define a unicode icons table
        icons = vim.g.have_nerd_font and {} or {
            cmd = "⌘",
            config = "🛠",
            event = "📅",
            ft = "📂",
            init = "⚙",
            keys = "🗝",
            plugin = "🔌",
            runtime = "💻",
            require = "🌙",
            source = "📄",
            start = "🚀",
            task = "📌",
            lazy = "💤 ",
        },
    },
})

-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/options.lua
================================================
-- [[ Setting options ]]
-- See `:help vim.opt`
-- NOTE: You can change these options as you wish!
--  For more options, you can see `:help option-list`

-- Make line numbers default
vim.opt.number = true
-- You can also add relative line numbers, to help with jumping.
--  Experiment for yourself to see if you like it!
vim.opt.relativenumber = true

-- Enable mouse mode, can be useful for resizing splits for example!
vim.opt.mouse = "a"

-- Don't show the mode, since it's already in the status line
vim.opt.showmode = false

-- Sync clipboard between OS and Neovim.
--  Schedule the setting after `UiEnter` because it can increase startup-time.
--  Remove this option if you want your OS clipboard to remain independent.
--  See `:help 'clipboard'`
vim.schedule(function()
    vim.opt.clipboard = "unnamedplus"
end)

-- Enable break indent
vim.opt.breakindent = true

-- Save undo history
vim.opt.undofile = true

-- Case-insensitive searching UNLESS \C or one or more capital letters in the search term
vim.opt.ignorecase = true
vim.opt.smartcase = true

-- Keep signcolumn on by default
vim.opt.signcolumn = "yes"

-- Decrease update time
vim.opt.updatetime = 250

-- Decrease mapped sequence wait time
-- Displays which-key popup sooner
vim.opt.timeoutlen = 300

-- Configure how new splits should be opened
vim.opt.splitright = true
vim.opt.splitbelow = true

-- Sets how neovim will display certain whitespace characters in the editor.
--  See `:help 'list'`
--  and `:help 'listchars'`
vim.opt.list = true
vim.opt.listchars = { tab = "» ", trail = "·", nbsp = "␣" }

-- Preview substitutions live, as you type!
vim.opt.inccommand = "split"

-- Show which line your cursor is on
vim.opt.cursorline = true

-- Minimal number of screen lines to keep above and below the cursor.
vim.opt.scrolloff = 7

-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/health.lua
================================================
--[[
--
-- This file is not required for your own configuration,
-- but helps people determine if their system is setup correctly.
--
--]]

local check_version = function()
    local verstr = tostring(vim.version())
    if not vim.version.ge then
        vim.health.error(string.format("Neovim out of date: '%s'. Upgrade to latest stable or nightly", verstr))
        return
    end

    if vim.version.ge(vim.version(), "0.10-dev") then
        vim.health.ok(string.format("Neovim version is: '%s'", verstr))
    else
        vim.health.error(string.format("Neovim out of date: '%s'. Upgrade to latest stable or nightly", verstr))
    end
end

local check_external_reqs = function()
    -- Basic utils: `git`, `make`, `unzip`
    for _, exe in ipairs { "git", "make", "unzip", "rg" } do
        local is_executable = vim.fn.executable(exe) == 1
        if is_executable then
            vim.health.ok(string.format("Found executable: '%s'", exe))
        else
            vim.health.warn(string.format("Could not find executable: '%s'", exe))
        end
    end

    return true
end

return {
    check = function()
        vim.health.start "kickstart.nvim"

        vim.health.info [[NOTE: Not every warning is a 'must-fix' in `:checkhealth`

  Fix only warnings for plugins and languages you intend to use.
    Mason will give warnings for languages that are not installed.
    You do not need to install, unless you want to use those languages!]]

        local uv = vim.uv or vim.loop
        vim.health.info("System Information: " .. vim.inspect(uv.os_uname()))

        check_version()
        check_external_reqs()
    end,
}



================================================
File: .config/nvim/lua/kickstart/plugins/barbar.lua
================================================
return {
    "romgrk/barbar.nvim",
    dependencies = {
        "lewis6991/gitsigns.nvim", -- OPTIONAL: for git status
        "nvim-tree/nvim-web-devicons", -- OPTIONAL: for file icons
    },
    init = function()
        vim.g.barbar_auto_setup = false
    end,
    opts = {
        animation = false,
    },
    version = "^1.0.0", -- optional: only update when a new 1.x version is released
}



================================================
File: .config/nvim/lua/kickstart/plugins/cmp.lua
================================================
local format = function(_, item)
    item.menu = ""

    return item
end

return {
    { -- Autocompletion
        "hrsh7th/nvim-cmp",
        event = "InsertEnter",
        dependencies = {
            -- Snippet Engine & its associated nvim-cmp source
            {
                "L3MON4D3/LuaSnip",
                build = (function()
                    -- Build Step is needed for regex support in snippets.
                    -- This step is not supported in many windows environments.
                    -- Remove the below condition to re-enable on windows.
                    if vim.fn.has "win32" == 1 or vim.fn.executable "make" == 0 then
                        return
                    end
                    return "make install_jsregexp"
                end)(),
                dependencies = {
                    -- `friendly-snippets` contains a variety of premade snippets.
                    --    See the README about individual language/framework/plugin snippets:
                    --    https://github.com/rafamadriz/friendly-snippets
                    -- {
                    --   'rafamadriz/friendly-snippets',
                    --   config = function()
                    --     require('luasnip.loaders.from_vscode').lazy_load()
                    --   end,
                    -- },
                },
            },
            "saadparwaiz1/cmp_luasnip",

            -- Adds other completion capabilities.
            --  nvim-cmp does not ship with all sources by default. They are split
            --  into multiple repos for maintenance purposes.
            "hrsh7th/cmp-nvim-lsp",
            "hrsh7th/cmp-path",
        },
        config = function()
            -- See `:help cmp`
            local cmp = require "cmp"
            local luasnip = require "luasnip"
            luasnip.config.setup {}

            cmp.setup {
                snippet = {
                    expand = function(args)
                        luasnip.lsp_expand(args.body)
                    end,
                },
                completion = { completeopt = "menu,menuone,noinsert" },

                ---@diagnostic disable-next-line: missing-fields
                formatting = {
                    format = format,
                },

                -- For an understanding of why these mappings were
                -- chosen, you will need to read `:help ins-completion`
                --
                -- No, but seriously. Please read `:help ins-completion`, it is really good!
                mapping = cmp.mapping.preset.insert {
                    -- Select the [n]ext item
                    ["<tab>"] = cmp.mapping.select_next_item(),
                    -- Select the [p]revious item
                    ["<S-tab>"] = cmp.mapping.select_prev_item(),

                    -- Scroll the documentation window [b]ack / [f]orward
                    ["<C-b>"] = cmp.mapping.scroll_docs(-4),
                    ["<C-f>"] = cmp.mapping.scroll_docs(4),

                    -- Accept ([y]es) the completion.
                    --  This will auto-import if your LSP supports it.
                    --  This will expand snippets if the LSP sent a snippet.
                    ["<CR>"] = cmp.mapping.confirm { select = true },

                    -- Manually trigger a completion from nvim-cmp.
                    --  Generally you don't need this, because nvim-cmp will display
                    --  completions whenever it has completion options available.
                    ["<C-Space>"] = cmp.mapping.complete {},

                    -- Think of <c-l> as moving to the right of your snippet expansion.
                    --  So if you have a snippet that's like:
                    --  function $name($args)
                    --    $body
                    --  end
                    --
                    -- <c-l> will move you to the right of each of the expansion locations.
                    -- <c-h> is similar, except moving you backwards.
                    ["<C-l>"] = cmp.mapping(function()
                        if luasnip.expand_or_locally_jumpable() then
                            luasnip.expand_or_jump()
                        end
                    end, { "i", "s" }),
                    ["<C-h>"] = cmp.mapping(function()
                        if luasnip.locally_jumpable(-1) then
                            luasnip.jump(-1)
                        end
                    end, { "i", "s" }),

                    -- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
                    --    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
                },
                sources = {
                    {
                        name = "lazydev",
                        -- set group index to 0 to skip loading LuaLS completions as lazydev recommends it
                        group_index = 0,
                    },
                    { name = "nvim_lsp" },
                    { name = "luasnip" },
                    { name = "path" },
                },
            }
        end,
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/colorful-menu.lua
================================================
return {
    "xzbdmw/colorful-menu.nvim",
    config = function()
        -- You don't need to set these options.
        require("colorful-menu").setup {
            ft = {
                lua = {
                    -- Maybe you want to dim arguments a bit.
                    auguments_hl = "@comment",
                },
                typescript = {
                    -- Or "vtsls", their information is different, so we
                    -- need to know in advance.
                    ls = "typescript-language-server",
                },
                rust = {
                    -- such as (as Iterator), (use std::io).
                    extra_info_hl = "@comment",
                },
                c = {
                    -- such as "From <stdio.h>"
                    extra_info_hl = "@comment",
                },
            },
            -- If the built-in logic fails to find a suitable highlight group,
            -- this highlight is applied to the label.
            fallback_highlight = "@variable",
            -- If provided, the plugin truncates the final displayed text to
            -- this width (measured in display cells). Any highlights that extend
            -- beyond the truncation point are ignored. Default 60.
            max_width = 60,
        }
    end,
}



================================================
File: .config/nvim/lua/kickstart/plugins/conform.lua
================================================
return {
    { -- Autoformat
        "stevearc/conform.nvim",
        event = { "BufWritePre" },
        cmd = { "ConformInfo" },
        keys = {
            {
                "<leader>f",
                function()
                    require("conform").format { async = true, lsp_format = "fallback" }
                end,
                mode = "",
                desc = "[F]ormat buffer",
            },
        },
        opts = {
            notify_on_error = false,
            format_on_save = function(bufnr)
                -- Disable "format_on_save lsp_fallback" for languages that don't
                -- have a well standardized coding style. You can add additional
                -- languages here or re-enable it for the disabled ones.
                local disable_filetypes = { c = true, cpp = true }
                local lsp_format_opt
                if disable_filetypes[vim.bo[bufnr].filetype] then
                    lsp_format_opt = "never"
                else
                    lsp_format_opt = "fallback"
                end
                return {
                    timeout_ms = 500,
                    lsp_format = lsp_format_opt,
                }
            end,
            formatters_by_ft = {
                lua = { "stylua" },
                -- Conform can also run multiple formatters sequentially
                python = { "isort", "black" },
                --
                -- You can use 'stop_after_first' to run the first available formatter from the list
                javascript = { "prettierd", "prettier", stop_after_first = true },
            },
        },
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/debug.lua
================================================
-- debug.lua
--
-- Shows how to use the DAP plugin to debug your code.
--
-- Primarily focused on configuring the debugger for Go, but can
-- be extended to other languages as well. That's why it's called
-- kickstart.nvim and not kitchen-sink.nvim ;)

return {
    -- NOTE: Yes, you can install new plugins here!
    "mfussenegger/nvim-dap",
    -- NOTE: And you can specify dependencies as well
    dependencies = {
        -- Creates a beautiful debugger UI
        "rcarriga/nvim-dap-ui",

        -- Required dependency for nvim-dap-ui
        "nvim-neotest/nvim-nio",

        -- Installs the debug adapters for you
        "williamboman/mason.nvim",
        "jay-babu/mason-nvim-dap.nvim",

        -- Add your own debuggers here
        "leoluz/nvim-dap-go",
    },
    keys = {
        -- Basic debugging keymaps, feel free to change to your liking!
        {
            "<F5>",
            function()
                require("dap").continue()
            end,
            desc = "Debug: Start/Continue",
        },
        {
            "<F1>",
            function()
                require("dap").step_into()
            end,
            desc = "Debug: Step Into",
        },
        {
            "<F2>",
            function()
                require("dap").step_over()
            end,
            desc = "Debug: Step Over",
        },
        {
            "<F3>",
            function()
                require("dap").step_out()
            end,
            desc = "Debug: Step Out",
        },
        {
            "<leader>b",
            function()
                require("dap").toggle_breakpoint()
            end,
            desc = "Debug: Toggle Breakpoint",
        },
        {
            "<leader>B",
            function()
                require("dap").set_breakpoint(vim.fn.input "Breakpoint condition: ")
            end,
            desc = "Debug: Set Breakpoint",
        },
        -- Toggle to see last session result. Without this, you can't see session output in case of unhandled exception.
        {
            "<F7>",
            function()
                require("dapui").toggle()
            end,
            desc = "Debug: See last session result.",
        },
    },
    config = function()
        local dap = require "dap"
        local dapui = require "dapui"

        require("mason-nvim-dap").setup {
            -- Makes a best effort to setup the various debuggers with
            -- reasonable debug configurations
            automatic_installation = true,

            -- You can provide additional configuration to the handlers,
            -- see mason-nvim-dap README for more information
            handlers = {},

            -- You'll need to check that you have the required things installed
            -- online, please don't ask me how to install them :)
            ensure_installed = {
                -- Update this to ensure that you have the debuggers for the langs you want
                "delve",
            },
        }

        -- Dap UI setup
        -- For more information, see |:help nvim-dap-ui|
        dapui.setup {
            -- Set icons to characters that are more likely to work in every terminal.
            --    Feel free to remove or use ones that you like more! :)
            --    Don't feel like these are good choices.
            icons = { expanded = "▾", collapsed = "▸", current_frame = "*" },
            controls = {
                icons = {
                    pause = "⏸",
                    play = "▶",
                    step_into = "⏎",
                    step_over = "⏭",
                    step_out = "⏮",
                    step_back = "b",
                    run_last = "▶▶",
                    terminate = "⏹",
                    disconnect = "⏏",
                },
            },
        }

        -- Change breakpoint icons
        -- vim.api.nvim_set_hl(0, 'DapBreak', { fg = '#e51400' })
        -- vim.api.nvim_set_hl(0, 'DapStop', { fg = '#ffcc00' })
        -- local breakpoint_icons = vim.g.have_nerd_font
        --     and { Breakpoint = '', BreakpointCondition = '', BreakpointRejected = '', LogPoint = '', Stopped = '' }
        --   or { Breakpoint = '●', BreakpointCondition = '⊜', BreakpointRejected = '⊘', LogPoint = '◆', Stopped = '⭔' }
        -- for type, icon in pairs(breakpoint_icons) do
        --   local tp = 'Dap' .. type
        --   local hl = (type == 'Stopped') and 'DapStop' or 'DapBreak'
        --   vim.fn.sign_define(tp, { text = icon, texthl = hl, numhl = hl })
        -- end

        dap.listeners.after.event_initialized["dapui_config"] = dapui.open
        dap.listeners.before.event_terminated["dapui_config"] = dapui.close
        dap.listeners.before.event_exited["dapui_config"] = dapui.close

        -- Install golang specific config
        require("dap-go").setup {
            delve = {
                -- On Windows delve must be run attached or it crashes.
                -- See https://github.com/leoluz/nvim-dap-go/blob/main/README.md#configuring
                detached = vim.fn.has "win32" == 0,
            },
        }
    end,
}



================================================
File: .config/nvim/lua/kickstart/plugins/gitsigns.lua
================================================
-- Here is a more advanced example where we pass configuration
-- options to `gitsigns.nvim`. This is equivalent to the following Lua:
--    require('gitsigns').setup({ ... })
--
-- See `:help gitsigns` to understand what the configuration keys do
return {
    { -- Adds git related signs to the gutter, as well as utilities for managing changes
        "lewis6991/gitsigns.nvim",
        opts = {
            signs = {
                add = { text = "+" },
                change = { text = "~" },
                delete = { text = "_" },
                topdelete = { text = "‾" },
                changedelete = { text = "~" },
            },
            on_attach = function(bufnr)
                local gitsigns = require "gitsigns"

                local function map(mode, l, r, opts)
                    opts = opts or {}
                    opts.buffer = bufnr
                    vim.keymap.set(mode, l, r, opts)
                end

                -- Navigation
                map("n", "]c", function()
                    if vim.wo.diff then
                        vim.cmd.normal { "]c", bang = true }
                    else
                        gitsigns.nav_hunk "next"
                    end
                end, { desc = "Jump to next git [c]hange" })

                map("n", "[c", function()
                    if vim.wo.diff then
                        vim.cmd.normal { "[c", bang = true }
                    else
                        gitsigns.nav_hunk "prev"
                    end
                end, { desc = "Jump to previous git [c]hange" })

                -- Actions
                -- visual mode
                map("v", "<leader>hs", function()
                    gitsigns.stage_hunk { vim.fn.line ".", vim.fn.line "v" }
                end, { desc = "git [s]tage hunk" })
                map("v", "<leader>hr", function()
                    gitsigns.reset_hunk { vim.fn.line ".", vim.fn.line "v" }
                end, { desc = "git [r]eset hunk" })
                -- normal mode
                -- map("n", "<leader>hs", gitsigns.stage_hunk, { desc = "git [s]tage hunk" })
                -- map("n", "<leader>hr", gitsigns.reset_hunk, { desc = "git [r]eset hunk" })
                -- map("n", "<leader>hS", gitsigns.stage_buffer, { desc = "git [S]tage buffer" })
                -- map("n", "<leader>hu", gitsigns.undo_stage_hunk, { desc = "git [u]ndo stage hunk" })
                -- map("n", "<leader>hR", gitsigns.reset_buffer, { desc = "git [R]eset buffer" })
                -- map("n", "<leader>hp", gitsigns.preview_hunk, { desc = "git [p]review hunk" })
                -- map("n", "<leader>hb", gitsigns.blame_line, { desc = "git [b]lame line" })
                -- map("n", "<leader>hd", gitsigns.diffthis, { desc = "git [d]iff against index" })
                -- map("n", "<leader>hD",
                -- function()
                -- gitsigns.diffthis "@"
                -- end, { desc = "git [D]iff against last commit" })
                -- Toggles
                map("n", "<leader>tb", gitsigns.toggle_current_line_blame, { desc = "[T]oggle git show [b]lame line" })
                map("n", "<leader>tD", gitsigns.toggle_deleted, { desc = "[T]oggle git show [D]eleted" })
            end,
        },
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/go-plugin.lua
================================================
return {
    "ray-x/go.nvim",
    dependencies = { -- optional packages
        "ray-x/guihua.lua",
        "neovim/nvim-lspconfig",
        "nvim-treesitter/nvim-treesitter",
    },
    config = function()
        require("go").setup()
    end,
    event = { "CmdlineEnter" },
    ft = { "go", "gomod" },
    build = ':lua require("go.install").update_all_sync()', -- if you need to install/update all binaries
}



================================================
File: .config/nvim/lua/kickstart/plugins/gonvim.lua
================================================
return {
    "ray-x/go.nvim",
    dependencies = { -- optional packages
        "ray-x/guihua.lua",
        "neovim/nvim-lspconfig",
        "nvim-treesitter/nvim-treesitter",
    },
    config = function()
        require("go").setup()
    end,
    event = { "CmdlineEnter" },
    ft = { "go", "gomod" },
    build = ':lua require("go.install").update_all_sync()', -- if you need to install/update all binaries
}



================================================
File: .config/nvim/lua/kickstart/plugins/harpoon.lua
================================================
return {
    "ThePrimeagen/harpoon",
    dependencies = { "nvim-lua/plenary.nvim" },
    opts = {},
}



================================================
File: .config/nvim/lua/kickstart/plugins/indent_line.lua
================================================
return {
    { -- Add indentation guides even on blank lines
        "lukas-reineke/indent-blankline.nvim",
        -- Enable `lukas-reineke/indent-blankline.nvim`
        -- See `:help ibl`
        main = "ibl",
        opts = {
            scope = {
                enabled = false,
            },
        },
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/lint.lua
================================================
return {

    { -- Linting
        "mfussenegger/nvim-lint",
        event = { "BufReadPre", "BufNewFile" },
        config = function()
            local lint = require "lint"
            lint.linters_by_ft = {
                markdown = { "markdownlint" },
            }

            -- To allow other plugins to add linters to require('lint').linters_by_ft,
            -- instead set linters_by_ft like this:
            -- lint.linters_by_ft = lint.linters_by_ft or {}
            -- lint.linters_by_ft['markdown'] = { 'markdownlint' }
            --
            -- However, note that this will enable a set of default linters,
            -- which will cause errors unless these tools are available:
            -- {
            --   clojure = { "clj-kondo" },
            --   dockerfile = { "hadolint" },
            --   inko = { "inko" },
            --   janet = { "janet" },
            --   json = { "jsonlint" },
            --   markdown = { "vale" },
            --   rst = { "vale" },
            --   ruby = { "ruby" },
            --   terraform = { "tflint" },
            --   text = { "vale" }
            -- }
            --
            -- You can disable the default linters by setting their filetypes to nil:
            -- lint.linters_by_ft['clojure'] = nil
            -- lint.linters_by_ft['dockerfile'] = nil
            -- lint.linters_by_ft['inko'] = nil
            -- lint.linters_by_ft['janet'] = nil
            -- lint.linters_by_ft['json'] = nil
            -- lint.linters_by_ft['markdown'] = nil
            -- lint.linters_by_ft['rst'] = nil
            -- lint.linters_by_ft['ruby'] = nil
            -- lint.linters_by_ft['terraform'] = nil
            -- lint.linters_by_ft['text'] = nil

            -- Create autocommand which carries out the actual linting
            -- on the specified events.
            local lint_augroup = vim.api.nvim_create_augroup("lint", { clear = true })
            vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost", "InsertLeave" }, {
                group = lint_augroup,
                callback = function()
                    -- Only run the linter in buffers that you can modify in order to
                    -- avoid superfluous noise, notably within the handy LSP pop-ups that
                    -- describe the hovered symbol using Markdown.
                    if vim.opt_local.modifiable:get() then
                        lint.try_lint()
                    end
                end,
            })
        end,
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/lspconfig.lua
================================================
-- LSP Plugins
return {
    {
        -- `lazydev` configures Lua LSP for your Neovim config, runtime and plugins
        -- used for completion, annotations and signatures of Neovim apis
        "folke/lazydev.nvim",
        ft = "lua",
        opts = {
            library = {
                -- Load luvit types when the `vim.uv` word is found
                { path = "luvit-meta/library", words = { "vim%.uv" } },
            },
        },
    },
    { "Bilal2453/luvit-meta", lazy = true },
    {
        -- Main LSP Configuration
        "neovim/nvim-lspconfig",
        dependencies = {
            -- Automatically install LSPs and related tools to stdpath for Neovim
            { "williamboman/mason.nvim", config = true }, -- NOTE: Must be loaded before dependants
            "williamboman/mason-lspconfig.nvim",
            "WhoIsSethDaniel/mason-tool-installer.nvim",

            -- Useful status updates for LSP.
            -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
            { "j-hui/fidget.nvim", opts = {} },

            -- Allows extra capabilities provided by nvim-cmp
            "hrsh7th/cmp-nvim-lsp",
        },
        config = function()
            --  This function gets run when an LSP attaches to a particular buffer.
            --    That is to say, every time a new file is opened that is associated with
            --    an lsp (for example, opening `main.rs` is associated with `rust_analyzer`) this
            --    function will be executed to configure the current buffer
            vim.api.nvim_create_autocmd("LspAttach", {
                group = vim.api.nvim_create_augroup("kickstart-lsp-attach", { clear = true }),
                callback = function(event)
                    -- NOTE: Remember that Lua is a real programming language, and as such it is possible
                    -- to define small helper and utility functions so you don't have to repeat yourself.
                    --
                    -- In this case, we create a function that lets us more easily define mappings specific
                    -- for LSP related items. It sets the mode, buffer and description for us each time.
                    local map = function(keys, func, desc, mode)
                        mode = mode or "n"
                        vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
                    end

                    -- Jump to the definition of the word under your cursor.
                    --  This is where a variable was first declared, or where a function is defined, etc.
                    --  To jump back, press <C-t>.
                    map("gd", require("telescope.builtin").lsp_definitions, "[G]oto [D]efinition")

                    -- Find references for the word under your cursor.
                    map("gr", require("telescope.builtin").lsp_references, "[G]oto [R]eferences")

                    -- Jump to the implementation of the word under your cursor.
                    --  Useful when your language has ways of declaring types without an actual implementation.
                    map("gI", require("telescope.builtin").lsp_implementations, "[G]oto [I]mplementation")

                    -- Jump to the type of the word under your cursor.
                    --  Useful when you're not sure what type a variable is and you want to see
                    --  the definition of its *type*, not where it was *defined*.
                    map("<leader>D", require("telescope.builtin").lsp_type_definitions, "Type [D]efinition")

                    -- Fuzzy find all the symbols in your current document.
                    --  Symbols are things like variables, functions, types, etc.
                    map("<leader>ds", require("telescope.builtin").lsp_document_symbols, "[D]ocument [S]ymbols")

                    -- Fuzzy find all the symbols in your current workspace.
                    --  Similar to document symbols, except searches over your entire project.
                    map("<leader>ws", require("telescope.builtin").lsp_dynamic_workspace_symbols, "[W]orkspace [S]ymbols")

                    -- Execute a code action, usually your cursor needs to be on top of an error
                    -- or a suggestion from your LSP for this to activate.
                    map("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction", { "n", "x" })

                    -- WARN: This is not Goto Definition, this is Goto Declaration.
                    --  For example, in C this would take you to the header.
                    map("gD", vim.lsp.buf.declaration, "[G]oto [D]eclaration")

                    -- The following two autocommands are used to highlight references of the
                    -- word under your cursor when your cursor rests there for a little while.
                    --    See `:help CursorHold` for information about when this is executed
                    --
                    -- When you move your cursor, the highlights will be cleared (the second autocommand).
                    local client = vim.lsp.get_client_by_id(event.data.client_id)
                    if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_documentHighlight) then
                        local highlight_augroup = vim.api.nvim_create_augroup("kickstart-lsp-highlight", { clear = false })
                        vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
                            buffer = event.buf,
                            group = highlight_augroup,
                            callback = vim.lsp.buf.document_highlight,
                        })

                        vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
                            buffer = event.buf,
                            group = highlight_augroup,
                            callback = vim.lsp.buf.clear_references,
                        })

                        vim.api.nvim_create_autocmd("LspDetach", {
                            group = vim.api.nvim_create_augroup("kickstart-lsp-detach", { clear = true }),
                            callback = function(event2)
                                vim.lsp.buf.clear_references()
                                vim.api.nvim_clear_autocmds { group = "kickstart-lsp-highlight", buffer = event2.buf }
                            end,
                        })
                    end

                    -- The following code creates a keymap to toggle inlay hints in your
                    -- code, if the language server you are using supports them
                    --
                    -- This may be unwanted, since they displace some of your code
                    if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
                        map("<leader>th", function()
                            vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
                        end, "[T]oggle Inlay [H]ints")
                    end
                end,
            })

            -- Change diagnostic symbols in the sign column (gutter)
            -- if vim.g.have_nerd_font then
            --   local signs = { ERROR = '', WARN = '', INFO = '', HINT = '' }
            --   local diagnostic_signs = {}
            --   for type, icon in pairs(signs) do
            --     diagnostic_signs[vim.diagnostic.severity[type]] = icon
            --   end
            --   vim.diagnostic.config { signs = { text = diagnostic_signs } }
            -- end

            -- LSP servers and clients are able to communicate to each other what features they support.
            --  By default, Neovim doesn't support everything that is in the LSP specification.
            --  When you add nvim-cmp, luasnip, etc. Neovim now has *more* capabilities.
            --  So, we create new capabilities with nvim cmp, and then broadcast that to the servers.
            local capabilities = vim.lsp.protocol.make_client_capabilities()
            capabilities = vim.tbl_deep_extend("force", capabilities, require("cmp_nvim_lsp").default_capabilities())

            -- Enable the following language servers
            --  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
            --
            --  Add any additional override configuration in the following tables. Available keys are:
            --  - cmd (table): Override the default command used to start the server
            --  - filetypes (table): Override the default list of associated filetypes for the server
            --  - capabilities (table): Override fields in capabilities. Can be used to disable certain LSP features.
            --  - settings (table): Override the default settings passed when initializing the server.
            --        For example, to see the options for `lua_ls`, you could go to: https://luals.github.io/wiki/settings/
            local servers = {
                -- clangd = {},
                -- gopls = {},
                -- pyright = {},
                -- rust_analyzer = {},
                -- ... etc. See `:help lspconfig-all` for a list of all the pre-configured LSPs
                --
                -- Some languages (like typescript) have entire language plugins that can be useful:
                --    https://github.com/pmizio/typescript-tools.nvim
                --
                -- But for many setups, the LSP (`ts_ls`) will work just fine
                -- ts_ls = {},
                --

                lua_ls = {
                    -- cmd = { ... },
                    -- filetypes = { ... },
                    -- capabilities = {},
                    settings = {
                        Lua = {
                            completion = {
                                callSnippet = "Replace",
                            },
                            format = { enable = true, defaultConfig = { indent_size = 4 } },
                            -- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
                            -- diagnostics = { disable = { 'missing-fields' } },
                        },
                    },
                },
            }

            -- Ensure the servers and tools above are installed
            --  To check the current status of installed tools and/or manually install
            --  other tools, you can run
            --    :Mason
            --
            --  You can press `g?` for help in this menu.
            require("mason").setup()

            -- You can add other tools here that you want Mason to install
            -- for you, so that they are available from within Neovim.
            local ensure_installed = vim.tbl_keys(servers or {})
            vim.list_extend(ensure_installed, {
                "stylua", -- Used to format Lua code
            })
            require("mason-tool-installer").setup { ensure_installed = ensure_installed }

            require("mason-lspconfig").setup {
                handlers = {
                    function(server_name)
                        local server = servers[server_name] or {}
                        -- This handles overriding only values explicitly passed
                        -- by the server configuration above. Useful when disabling
                        -- certain features of an LSP (for example, turning off formatting for ts_ls)
                        server.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server.capabilities or {})
                        require("lspconfig")[server_name].setup(server)
                    end,
                },
            }
            require("go").setup {
                lsp_cfg = false,
                -- other setups...
            }
        end,
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/markview.lua
================================================
return {
    "OXY2DEV/markview.nvim",
    lazy = false, -- Recommended
    -- ft = "markdown" -- If you decide to lazy-load anyway

    dependencies = {
        "nvim-treesitter/nvim-treesitter",
        "nvim-tree/nvim-web-devicons",
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/mini.lua
================================================
return {
    { -- Collection of various small independent plugins/modules
        "echasnovski/mini.nvim",
        config = function()
            -- Better Around/Inside textobjects

            -- Examples:
            --  - va)  - [V]isually select [A]round [)]paren
            --  - yinq - [Y]ank [I]nside [N]ext [Q]uote
            --  - ci'  - [C]hange [I]nside [']quote
            require("mini.ai").setup { n_lines = 500 }

            -- Add/delete/replace surroundings (brackets, quotes, etc.)
            --
            -- - saiw) - [S]urround [A]dd [I]nner [W]ord [)]Paren
            -- - sd'   - [S]urround [D]elete [']quotes
            -- - sr)'  - [S]urround [R]eplace [)] [']
            require("mini.surround").setup()

            require("mini.bracketed").setup()

            require("mini.comment").setup()

            require("mini.icons").setup()
        end,
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/moveline.lua
================================================
return {
    "fedepujol/move.nvim",
    opts = {
        --- Config
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/neotree.lua
================================================
return {
    "nvim-neo-tree/neo-tree.nvim",
    version = "*",
    dependencies = {
        "nvim-lua/plenary.nvim",
        "nvim-tree/nvim-web-devicons",
        "MunifTanjim/nui.nvim",
    },
    cmd = "Neotree",
    keys = {
        { "<leader>e", ":Neotree toggle right<CR>", desc = "NeoTree toggle", silent = true },
    },
    opts = {
        filesystem = {
            window = {
                mappings = {
                    ["<leader>e"] = "close_window",
                },
            },
        },
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/snacks.lua
================================================
return {
    "folke/snacks.nvim",
    priority = 1000,
    lazy = false,
    ---@type snacks.Config
    opts = {
        -- your configuration comes here
        -- or leave it empty to use the default settings
        -- refer to the configuration section below
        dashboard = {
            enabled = true,
            sections = {
                { icon = " ", title = "Recent Files", section = "recent_files", limit = 8, indent = 2, padding = { 2, 2 } },
            },
        },
        lazygit = { enabled = true },
        quickfile = { enabled = true },
        statuscolumn = { enabled = true },
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/tailwind-tools.lua
================================================
return {
    "luckasRanarison/tailwind-tools.nvim",
    dependencies = { "nvim-treesitter/nvim-treesitter" },
    opts = {}, -- your configuration
}, {
    "MaximilianLloyd/tw-values.nvim",
    keys = {
        { "<leader>tav", "<cmd>TWValues<cr>", desc = "Show tailwind CSS values" },
    },
    opts = {
        border = "rounded", -- Valid window border style,
        show_unknown_classes = true, -- Shows the unknown classes popup
        focus_preview = true, -- Sets the preview as the current window
        copy_register = "", -- The register to copy values to,
        keymaps = {
            copy = "<C-y>", -- Normal mode keymap to copy the CSS values between {}
        },
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/telescope.lua
================================================
-- NOTE: Plugins can specify dependencies.
--
-- The dependencies are proper plugin specifications as well - anything
-- you do for a plugin at the top level, you can do for a dependency.
--
-- Use the `dependencies` key to specify the dependencies of a particular plugin

return {
    { -- Fuzzy Finder (files, lsp, etc)
        "nvim-telescope/telescope.nvim",
        event = "VimEnter",
        branch = "0.1.x",
        dependencies = {
            "nvim-lua/plenary.nvim",
            { -- If encountering errors, see telescope-fzf-native README for installation instructions
                "nvim-telescope/telescope-fzf-native.nvim",

                -- `build` is used to run some command when the plugin is installed/updated.
                -- This is only run then, not every time Neovim starts up.
                build = "make",

                -- `cond` is a condition used to determine whether this plugin should be
                -- installed and loaded.
                cond = function()
                    return vim.fn.executable "make" == 1
                end,
            },
            { "nvim-telescope/telescope-ui-select.nvim" },

            -- Useful for getting pretty icons, but requires a Nerd Font.
            { "nvim-tree/nvim-web-devicons", enabled = vim.g.have_nerd_font },
        },
        config = function()
            -- Telescope is a fuzzy finder that comes with a lot of different things that
            -- it can fuzzy find! It's more than just a "file finder", it can search
            -- many different aspects of Neovim, your workspace, LSP, and more!
            --
            -- The easiest way to use Telescope, is to start by doing something like:
            --  :Telescope help_tags
            --
            -- After running this command, a window will open up and you're able to
            -- type in the prompt window. You'll see a list of `help_tags` options and
            -- a corresponding preview of the help.
            --
            -- Two important keymaps to use while in Telescope are:
            --  - Insert mode: <c-/>
            --  - Normal mode: ?
            --
            -- This opens a window that shows you all of the keymaps for the current
            -- Telescope picker. This is really useful to discover what Telescope can
            -- do as well as how to actually do it!

            -- [[ Configure Telescope ]]
            -- See `:help telescope` and `:help telescope.setup()`
            require("telescope").setup {
                -- You can put your default mappings / updates / etc. in here
                --  All the info you're looking for is in `:help telescope.setup()`
                --
                -- defaults = {
                --   mappings = {
                --     i = { ['<c-enter>'] = 'to_fuzzy_refine' },
                --   },
                -- },
                -- pickers = {}
                extensions = {
                    ["ui-select"] = {
                        require("telescope.themes").get_dropdown(),
                    },
                },
            }

            -- Enable Telescope extensions if they are installed
            pcall(require("telescope").load_extension, "fzf")
            pcall(require("telescope").load_extension, "ui-select")

            -- See `:help telescope.builtin`
            local builtin = require "telescope.builtin"
            vim.keymap.set("n", "<leader>sh", builtin.help_tags, { desc = "[S]earch [H]elp" })
            vim.keymap.set("n", "<leader>sk", builtin.keymaps, { desc = "[S]earch [K]eymaps" })
            vim.keymap.set("n", "<leader><leader>", builtin.find_files, { desc = "[S]earch [F]iles" })
            vim.keymap.set("n", "<leader>ss", builtin.builtin, { desc = "[S]earch [S]elect Telescope" })
            vim.keymap.set("n", "<leader>sw", builtin.grep_string, { desc = "[S]earch current [W]ord" })
            vim.keymap.set("n", "<leader>fw", builtin.live_grep, { desc = "[S]earch by [G]rep" })
            vim.keymap.set("n", "<leader>sd", builtin.diagnostics, { desc = "[S]earch [D]iagnostics" })
            vim.keymap.set("n", "<leader>sr", builtin.resume, { desc = "[S]earch [R]esume" })
            vim.keymap.set("n", "<leader>s.", builtin.oldfiles, { desc = '[S]earch Recent Files ("." for repeat)' })
            -- vim.keymap.set("n", "<leader><leader>", builtin.buffers, { desc = "[ ] Find existing buffers" })

            -- Slightly advanced example of overriding default behavior and theme
            vim.keymap.set("n", "<leader>/", function()
                -- You can pass additional configuration to Telescope to change the theme, layout, etc.
                builtin.current_buffer_fuzzy_find(require("telescope.themes").get_dropdown {
                    winblend = 10,
                    previewer = false,
                })
            end, { desc = "[/] Fuzzily search in current buffer" })

            -- It's also possible to pass additional configuration options.
            --  See `:help telescope.builtin.live_grep()` for information about particular keys
            vim.keymap.set("n", "<leader>s/", function()
                builtin.live_grep {
                    grep_open_files = true,
                    prompt_title = "Live Grep in Open Files",
                }
            end, { desc = "[S]earch [/] in Open Files" })

            -- Shortcut for searching your Neovim configuration files
            vim.keymap.set("n", "<leader>sn", function()
                builtin.find_files { cwd = vim.fn.stdpath "config" }
            end, { desc = "[S]earch [N]eovim files" })
        end,
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/themes.lua
================================================
return {
    { -- You can easily change to a different colorscheme.
        -- Change the name of the colorscheme plugin below, and then
        -- change the command in the config to whatever the name of that colorscheme is.
        --
        -- If you want to see what colorschemes are already installed, you can use `:Telescope colorscheme`.
        "rebelot/kanagawa.nvim",
        priority = 1001, -- Make sure to load this before all the other start plugins.
        opts = {
            theme = "wave",
        },
        init = function()
            vim.cmd.colorscheme "kanagawa"
        end,
    },
    {
        {
            "jackplus-xyz/binary.nvim",
            opts = {
                colors = {
                    bg = "#FFA000",
                },
            },
        },
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/todo-comments.lua
================================================
-- Highlight todo, notes, etc in comments
return {
    { "folke/todo-comments.nvim", event = "VimEnter", dependencies = { "nvim-lua/plenary.nvim" }, opts = { signs = false } },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/tokyonight.lua
================================================
return {
    { -- You can easily change to a different colorscheme.
        -- Change the name of the colorscheme plugin below, and then
        -- change the command in the config to whatever the name of that colorscheme is.
        --
        -- If you want to see what colorschemes are already installed, you can use `:Telescope colorscheme`.
        "folke/tokyonight.nvim",
        priority = 1000, -- Make sure to load this before all the other start plugins.
        init = function()
            -- Load the colorscheme here.
            -- Like many other themes, this one has different styles, and you could load
            -- any other, such as 'tokyonight-storm', 'tokyonight-moon', or 'tokyonight-day'.
            vim.cmd.colorscheme "tokyonight-night"

            -- You can configure highlights by doing something like:
            vim.cmd.hi "Comment gui=none"
        end,
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/treesitter.lua
================================================
return {
    { -- Highlight, edit, and navigate code
        "nvim-treesitter/nvim-treesitter",
        build = ":TSUpdate",
        main = "nvim-treesitter.configs", -- Sets main module to use for opts
        -- [[ Configure Treesitter ]] See `:help nvim-treesitter`
        opts = {
            ensure_installed = {
                "bash",
                "c",
                "diff",
                "html",
                "lua",
                "luadoc",
                "markdown",
                "markdown_inline",
                "query",
                "vim",
                "vimdoc",
                "go",
                "python",
                "javascript",
                "typescript",
            },
            -- Autoinstall languages that are not installed
            auto_install = true,
            highlight = {
                enable = true,
                -- Some languages depend on vim's regex highlighting system (such as Ruby) for indent rules.
                --  If you are experiencing weird indenting issues, add the language to
                --  the list of additional_vim_regex_highlighting and disabled languages for indent.
                additional_vim_regex_highlighting = { "ruby" },
            },
            indent = { enable = true, disable = { "ruby" } },
        },
        -- There are additional nvim-treesitter modules that you can use to interact
        -- with nvim-treesitter. You should go explore a few and see what interests you:
        --
        --    - Incremental selection: Included, see `:help nvim-treesitter-incremental-selection-mod`
        --    - Show your current context: https://github.com/nvim-treesitter/nvim-treesitter-context
        --    - Treesitter + textobjects: https://github.com/nvim-treesitter/nvim-treesitter-textobjects
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/trouble.lua
================================================
return {
    "folke/trouble.nvim",
    opts = {}, -- for default options, refer to the configuration section for custom setup.
    cmd = "Trouble",
    keys = {
        {
            "<leader>trt",
            "<cmd>Trouble diagnostics toggle<cr>",
            desc = "Diagnostics (Trouble)",
        },
        {
            "<leader>trf",
            "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
            desc = "Buffer Diagnostics (Trouble)",
        },
        {
            "<leader>trs",
            "<cmd>Trouble symbols toggle focus=false<cr>",
            desc = "Symbols (Trouble)",
        },
        {
            "<leader>trw",
            "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
            desc = "LSP Definitions / references / ... (Trouble)",
        },
        {
            "<leader>trl",
            "<cmd>Trouble loclist toggle<cr>",
            desc = "Location List (Trouble)",
        },
        {
            "<leader>trq",
            "<cmd>Trouble qflist toggle<cr>",
            desc = "Quickfix List (Trouble)",
        },
    },
}



================================================
File: .config/nvim/lua/kickstart/plugins/undotree.lua
================================================
return {
    "mbbill/undotree",
    config = function() end,
}



================================================
File: .config/nvim/lua/kickstart/plugins/which-key.lua
================================================
-- NOTE: Plugins can also be configured to run Lua code when they are loaded.
--
-- This is often very useful to both group configuration, as well as handle
-- lazy loading plugins that don't need to be loaded immediately at startup.
--
-- For example, in the following configuration, we use:
--  event = 'VimEnter'
--
-- which loads which-key before all the UI elements are loaded. Events can be
-- normal autocommands events (`:help autocmd-events`).
--
-- Then, because we use the `opts` key (recommended), the configuration runs
-- after the plugin has been loaded as `require(MODULE).setup(opts)`.

return {
    { -- Useful plugin to show you pending keybinds.
        "folke/which-key.nvim",
        event = "VimEnter", -- Sets the loading event to 'VimEnter'
        opts = {
            icons = {
                -- set icon mappings to true if you have a Nerd Font
                mappings = vim.g.have_nerd_font,
                -- If you are using a Nerd Font: set icons.keys to an empty table which will use the
                -- default which-key.nvim defined Nerd Font icons, otherwise define a string table
                keys = vim.g.have_nerd_font and {} or {
                    Up = "<Up> ",
                    Down = "<Down> ",
                    Left = "<Left> ",
                    Right = "<Right> ",
                    C = "<C-…> ",
                    M = "<M-…> ",
                    D = "<D-…> ",
                    S = "<S-…> ",
                    CR = "<CR> ",
                    Esc = "<Esc> ",
                    ScrollWheelDown = "<ScrollWheelDown> ",
                    ScrollWheelUp = "<ScrollWheelUp> ",
                    NL = "<NL> ",
                    BS = "<BS> ",
                    Space = "<Space> ",
                    Tab = "<Tab> ",
                    F1 = "<F1>",
                    F2 = "<F2>",
                    F3 = "<F3>",
                    F4 = "<F4>",
                    F5 = "<F5>",
                    F6 = "<F6>",
                    F7 = "<F7>",
                    F8 = "<F8>",
                    F9 = "<F9>",
                    F10 = "<F10>",
                    F11 = "<F11>",
                    F12 = "<F12>",
                },
            },

            -- Document existing key chains
            spec = {
                { "<leader>c", group = "[C]ode", mode = { "n", "x" } },
                { "<leader>d", group = "[D]ocument" },
                { "<leader>r", group = "[R]ename" },
                { "<leader>s", group = "[S]earch" },
                { "<leader>w", group = "[W]orkspace" },
                { "<leader>t", group = "[T]oggle" },
                { "<leader>h", group = "Git [H]unk", mode = { "n", "v" } },
            },
        },
    },
}
-- vim: ts=2 sts=2 sw=2 et



================================================
File: .config/nvim/lua/kickstart/plugins/windsurf.lua
================================================
return {}



================================================
File: .config/waybar/config.jsonc
================================================
{
    "layer": "top",
    "position": "top",
    // a little taller for 16px text + padding
    "height": 24,
    "margin-top": 0,
    "margin-bottom": 0,
    "modules-left": [
        "tray"
    ],
    "modules-center": [
        "hyprland/workspaces"
    ],
    "modules-right": [
        "idle_inhibitor",
        "pulseaudio",
        "backlight",
        "battery",
        "power-profiles-daemon",
        "clock"
    ],
    "tray": {
        "icon-size": 20,
        "spacing": 6
    },
    "idle_inhibitor": {
        "format": "{icon}",
        "format-icons": {
            "activated": "",
            "deactivated": ""
        }
    },
    "pulseaudio": {
        "format": "{icon} {volume}%", // ensure a space
        "format-muted": "",
        "format-bluetooth": "{icon} {volume}%",
        "format-bluetooth-muted": "",
        "format-icons": {
            "default": [
                "",
                "",
                ""
            ],
            "headphone": "",
            "hands-free": "",
            "headset": "🎧",
            "phone": "",
            "portable": "",
            "car": ""
        },
        "on-click": "pavucontrol"
    },
    "backlight": {
        "format": "{icon} {percent}%",
        "format-icons": [
            "",
            ""
        ],
        "on-scroll-down": "brightnessctl -c backlight set 1%-",
        "on-scroll-up": "brightnessctl -c backlight set +1%+"
    },
    "battery": {
        "states": {
            "warning": 30,
            "critical": 15
        },
        "format": "{icon} {capacity}%",
        "format-charging": " {capacity}%",
        "format-plugged": " {capacity}%",
        "format-icons": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    "power-profiles-daemon": {
        "format": "{icon}",
        "tooltip-format": "Profile: {profile}",
        "format-icons": {
            "default": "",
            "performance": "",
            "balanced": "",
            "power-saver": ""
        }
    },
    "clock": {
        "locale": "C",
        "format": " {:%I:%M %p}", // explicit non-breaking spaces
        "format-alt": " {:%a, %b %d}",
        "tooltip": false
    },
    "network": {
        "interval": 2,
        "format-wifi": " {signalStrength}%",
        "format-ethernet": "",
        "format-linked": " {ipaddr}",
        "format-disconnected": " Disconnected",
        "format-disabled": "",
        "tooltip": false,
        "max-length": 20,
        "min-length": 6,
        "format-alt": "{essid}"
    },
    "mpd": {
        "format": "{stateIcon} {artist} - {title}",
        "format-disconnected": "🎶",
        "format-stopped": "♪",
        "interval": 10,
        "consume-icons": {
            "on": " " // Icon shows only when "consume" is on
        },
        "random-icons": {
            "off": "<span color=\"#f53c3c\"></span> ", // Icon grayed out when "random" is off
            "on": " "
        },
        "repeat-icons": {
            "on": " "
        },
        "single-icons": {
            "on": "1 "
        },
        "state-icons": {
            "paused": "",
            "playing": ""
        },
        "tooltip-format": "MPD (connected)",
        "tooltip-format-disconnected": "MPD (disconnected)",
        "max-length": 35
    },
    "custom/recorder": {
        "format": " Rec",
        "format-disabled": " Off-air", //An empty format will hide the module.
        "return-type": "json",
        "interval": 1,
        "exec": "echo '{\"class\": \"recording\"}'",
        "exec-if": "pgrep wf-recorder"
    },
    "custom/audiorec": {
        "format": "♬ Rec",
        "format-disabled": "♬ Off-air", //An empty format will hide the module.
        "return-type": "json",
        "interval": 1,
        "exec": "echo '{\"class\": \"audio recording\"}'",
        "exec-if": "pgrep ffmpeg"
    }
}



================================================
File: .config/waybar/style.css
================================================
* {
  font-family: "Noto Sans", "Font Awesome 6 Free", monospace;
  font-size: 16px;
}

window#waybar {
  background-color: rgba(33, 34, 45, 0);
}

#workspaces {
  margin: 0px 2px 0 16px;
}

#workspaces button {
  background-color: #2E3038;
  color: #000000;
  border-radius: 8px;
  margin-right: 8px;
  padding: 4px 12px;
  transition: background-color 0.2s, color 0.2s;
}

#workspaces button.active,
#workspaces button.focused {
  background-color: #E0AFBB;
  color: #21222C;
}

#workspaces button:hover {
  background-color: rgba(224,175,187,0.4);
  color: #21222C;
}

.module > span.icon,
.module > i {
  margin-right: 4px;
}

#tray,
#idle_inhibitor,
#pulseaudio,
#backlight,
#battery,
#power-profiles-daemon,
#clock {
  color: #EEEEEE;
  margin-left: 4px;
  padding: 4px 8px;
  border-radius: 6px;
  transition: background-color 0.2s, color 0.2s;
}

#tray:hover,
#idle_inhibitor:hover,
#pulseaudio:hover,
#backlight:hover,
#battery:hover,
#power-profiles-daemon:hover,
#clock:hover {
  background-color: rgba(224,175,187,0.2);
  color: #E0AFBB;
}



================================================
File: .config/wofi/style.css
================================================
/* The name of the window itself */
#window {
  background-color: rgba(24, 24, 24, 0.6);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
  border-radius: 1rem;
  font-size: 1.2rem;
  /* The name of the box that contains everything */
}
#window #outer-box {
  /* The name of the search bar */
  /* The name of the scrolled window containing all of the entries */
}
#window #outer-box #input {
  background-color: rgba(24, 24, 24, 0.6);
  color: #f2f2f2;
  border: none;
  border-bottom: 1px solid rgba(24, 24, 24, 0.2);
  padding: 0.8rem 1rem;
  font-size: 1.5rem;
  border-radius: 1rem 1rem 0 0;
}
#window #outer-box #input:focus, #window #outer-box #input:focus-visible, #window #outer-box #input:active {
  border: none;
  outline: 2px solid transparent;
  outline-offset: 2px;
}
#window #outer-box #scroll {
  /* The name of the box containing all of the entries */
}
#window #outer-box #scroll #inner-box {
  /* The name of all entries */
  /* The name of all boxes shown when expanding  */
  /* entries with multiple actions */
}
#window #outer-box #scroll #inner-box #entry {
  color: #fff;
  background-color: rgba(24, 24, 24, 0.1);
  padding: 0.6rem 1rem;
  /* The name of all images in entries displayed in image mode */
  /* The name of all the text in entries */
}
#window #outer-box #scroll #inner-box #entry #img {
  width: 1rem;
  margin-right: 0.5rem;
}
#window #outer-box #scroll #inner-box #entry:selected {
  color: #fff;
  background-color: rgba(255, 255, 255, 0.1);
  outline: none;
}



================================================
File: .config/wofi/style.scss
================================================
/* The name of the window itself */
#window {
	background-color: rgba(24,24,24,0.6);
	box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
	border-radius: 1rem;
	font-size: 1.2rem;
	/* The name of the box that contains everything */
	#outer-box {
		/* The name of the search bar */
		#input {
			background-color: rgba(24,24,24,0.6);
			color: #f2f2f2;
			border: none;
			border-bottom: 1px solid rgba(24,24,24,0.2);
			padding: 0.8rem 1rem;
			font-size: 1.5rem;
			border-radius: 1rem 1rem 0 0;
			&:focus, &:focus-visible, &:active {
				border: none;
				outline: 2px solid transparent;
				outline-offset: 2px;
			}
		}

		/* The name of the scrolled window containing all of the entries */
		#scroll {
			/* The name of the box containing all of the entries */
			#inner-box {
				/* The name of all entries */
				#entry {
					color: #fff; 
					background-color: rgba(24,24,24,0.1);
					padding: 0.6rem 1rem;

					/* The name of all images in entries displayed in image mode */
					#img {
						width: 1rem;
						margin-right: 0.5rem;
					}
					/* The name of all the text in entries */
					#text {}
					&:selected {
						color: #fff; 
						background-color: rgba(255,255,255,0.1);
						outline: none;
					}
				}
				/* The name of all boxes shown when expanding  */
				/* entries with multiple actions */
				#expander-box {
				}
			}
		}
	}
}





